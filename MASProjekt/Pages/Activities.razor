@page "/activities"
@inject IActivityService ActivityService
@inject ITrainerService TrainerService
@inject NavigationManager NavManager

<h3>Activities</h3>

@if (ActivityService.Activities != null | ActivityService.Activities.Any())
{
    <MudSimpleTable Striped="true" Bordered="true" Class="mb-2">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Start</th>
                <th>End</th>
                <th>Trainer assigned</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in ActivityService.Activities)
            {
                <tr>
                    <td>@activity.Title</td>
                    <td>@activity.Description</td>
                    <td>@activity.Start</td>
                    <td>@activity.End</td>
                    <td>@GetTrainer(activity.TrainerId).Name</td>
                    <td>
                        <button class="btn btn-primary"
                        @onclick="(() => ShowActivity(activity.ID))">
                            Replace
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}
else
{
    <h1>There is no need to worry, all of the activities have trainers assigned or there are currently no activities available</h1>
}

@code{
    protected override async Task OnInitializedAsync()
    {
        await ActivityService.LoadActivities();
        await TrainerService.LoadTrainers();
    }

    Trainer GetTrainer(int id)
    {
        return TrainerService.Trainers.First(x => x.ID == id);
    }

    void ShowActivity(int id)
    {
        NavManager.NavigateTo($"assignTrainer/{id}");
    }
}

