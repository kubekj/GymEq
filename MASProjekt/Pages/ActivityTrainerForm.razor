@page "/assignTrainer/{id:int}"

@inject IActivityService ActivityService
@inject ITrainerService TrainerService
@inject IDialogService DialogService
@inject NavigationManager NavManager

@if (Trainers != null && Trainers.Any())
{
    <h3>Please assign a new trainer !</h3>

    <EditForm Model="Activity" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Title" @bind-Value="Activity.Title" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                <MudTextField Label="Description" @bind-Value="Activity.Description" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                <MudTextField Label="Start" T="DateTime" Format="s" @bind-Value="Activity.Start" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                <MudTextField Label="End" T="DateTime" Format="s" @bind-Value="Activity.End" Disabled="true" Variant="Variant.Outlined"></MudTextField>
            </MudCardContent>
        </MudCard>
        <MudCard>
            <MudCardContent>
                <MudSelect Label="Trainer" @bind-Value="Activity.TrainerId" HelperText="Please select preferred trainer" Class="mr-4 mt-4" Placeholder="---">
                    @foreach (var trainer in Trainers)
                        {
                        <MudSelectItem Value="trainer.ID">@trainer.Name @trainer.Surname</MudSelectItem>
                        }
                </MudSelect>
            </MudCardContent>
        </MudCard>
        <MudButton ButtonType="ButtonType.Submit" Class="mr-4 mt-4" Variant="Variant.Filled" Color="Color.Primary">
            Assign Trainer
        </MudButton>
    </EditForm>
}
else
{
    <h3>There are no trainers available at that time</h3>

    <MudContainer Class="d-flex justify-center align-center">
        <MudPaper Elevation="1" Class="pa-10" style="text-align:center">
            <MudContainer Class="d-flex flex-column justify-center" style="width: 450px">
                <h6>No one can take it from previous trainer, would You like to call off the activity or postpone it ?</h6>

                <MudButton OnClick="RedirectToPostpone" Class="align-self-center mt-6" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">
                    Postpone
                </MudButton>

                <MudButton OnClick="DeleteActivity" Class="align-self-center mt-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">
                    Call off
                </MudButton>

            </MudContainer>
        </MudPaper>
    </MudContainer>
}

<MudButton OnClick="RedirectToMainPage" Class="align-center" Variant="Variant.Filled" Color="Color.Warning">
    Cancel
</MudButton>

@code {
    [Parameter]
    public int Id { get; set; }

    Activity Activity = new Activity();
    List<Trainer> Trainers = new List<Trainer>();

    protected override async Task OnParametersSetAsync()
    {
        Activity = await ActivityService.GetActivity(Id);
        Trainers = await TrainerService.LoadFreeTrainers(Id);
    }

    async Task DeleteActivity()
    {
        await ActivityService.RemoveActivity(Activity.ID);
        RedirectToMainPage();
    }

    void RedirectToPostpone()
    {
        NavManager.NavigateTo($"/postponeActivity/{Id}");
    }

    async void HandleCancel()
    {
        RedirectToMainPage();
    }

    void RedirectToMainPage()
    {
        NavManager.NavigateTo($"/activities");
    }

    async void HandleSubmit()
    {
            await ActivityService.AssignTrainer(Activity.TrainerId, Id);
            await DialogService.ShowMessageBox("Success", "You have succesfully assigned a trainer !");
            RedirectToMainPage();
    }
}

